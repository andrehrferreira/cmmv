export default{mounted(){this.addContracts({index:{auth:{index:0,types:{User:0,LoginRequest:1,LoginResponse:2,RegisterRequest:3,RegisterResponse:4,AuthService:5}},task:{index:1,types:{Task:0,TaskList:1,AddTaskRequest:2,AddTaskResponse:3,UpdateTaskRequest:4,UpdateTaskResponse:5,DeleteTaskRequest:6,DeleteTaskResponse:7,GetAllTaskRequest:8,GetAllTaskResponse:9,TaskService:10}},ws:{index:2,types:{WsCall:0}},wserror:{index:3,types:{WsError:0}}},contracts:{auth:{options:{syntax:"proto3"},nested:{auth:{nested:{User:{fields:{username:{type:"string",id:1},password:{type:"string",id:2},googleId:{type:"string",id:3},groups:{type:"string",id:4}}},LoginRequest:{fields:{username:{type:"string",id:1},password:{type:"string",id:2}}},LoginResponse:{fields:{success:{type:"bool",id:1},token:{type:"string",id:2},message:{type:"string",id:3}}},RegisterRequest:{fields:{username:{type:"string",id:1},email:{type:"string",id:2},password:{type:"string",id:3}}},RegisterResponse:{fields:{success:{type:"bool",id:1},message:{type:"string",id:3}}},AuthService:{methods:{Login:{requestType:"LoginRequest",responseType:"LoginResponse"},Register:{requestType:"RegisterRequest",responseType:"RegisterResponse"}}}}}}},task:{options:{syntax:"proto3"},nested:{task:{nested:{Task:{fields:{label:{type:"string",id:1},checked:{type:"bool",id:2},removed:{type:"bool",id:3}}},TaskList:{fields:{items:{rule:"repeated",type:"Task",id:1}}},AddTaskRequest:{fields:{item:{type:"Task",id:1}}},AddTaskResponse:{fields:{id:{type:"string",id:1},item:{type:"Task",id:2}}},UpdateTaskRequest:{fields:{id:{type:"string",id:1},item:{type:"Task",id:2}}},UpdateTaskResponse:{fields:{id:{type:"string",id:1},item:{type:"Task",id:2}}},DeleteTaskRequest:{fields:{id:{type:"string",id:1}}},DeleteTaskResponse:{fields:{success:{type:"bool",id:1},affected:{type:"int32",id:2},id:{type:"string",id:3}}},GetAllTaskRequest:{fields:{}},GetAllTaskResponse:{fields:{items:{type:"TaskList",id:1}}},TaskService:{methods:{AddTask:{requestType:"AddTaskRequest",responseType:"AddTaskResponse"},UpdateTask:{requestType:"UpdateTaskRequest",responseType:"UpdateTaskResponse"},DeleteTask:{requestType:"DeleteTaskRequest",responseType:"DeleteTaskResponse"},GetAllTask:{requestType:"GetAllTaskRequest",responseType:"GetAllTaskResponse"}}}}}}},ws:{options:{syntax:"proto3"},nested:{ws:{nested:{WsCall:{fields:{contract:{type:"int32",id:1},message:{type:"int32",id:2},data:{type:"bytes",id:3}}}}}}},wserror:{options:{syntax:"proto3"},nested:{wserror:{nested:{WsError:{fields:{message:{type:"string",id:1},code:{type:"int32",id:2},context:{type:"string",id:3}}}}}}}}}),this.connectWebSocket()},data(){return{socket:null,contractIndex:0,contracts:{},binds:{}}},methods:{connectWebSocket(){var e=window.location.href.replace("https","wss").replace("http","ws");this.socket=new WebSocket(e),this.socket.binaryType="arraybuffer",this.socket.addEventListener("message",this.parseMessage),this.socket.addEventListener("open",()=>{}),this.socket.addEventListener("close",()=>{console.warn("WebSocket disconnected. Attempting to reconnect in 10 seconds..."),setTimeout(()=>{this.connectWebSocket()},this.reconnectInterval)}),this.socket.addEventListener("error",e=>{console.error("WebSocket error:",e)})},addContracts(e){try{for(var s in this.contractIndex=e.index,e.contracts){var t;e.contracts.hasOwnProperty(s)&&(t=protobuf.Root.fromJSON(e.contracts[s]),this.contracts[s]=t)}}catch(e){console.error("Error loading contracts:",e)}},getContract(e){return this.contracts[e]},parseMessage(n){try{var e=n.data instanceof ArrayBuffer?new Uint8Array(n.data):n.data;let t=this.contracts.ws.lookupType("WsCall").decode(e),i=Object.keys(this.contractIndex).find(e=>this.contractIndex[e].index===t.contract);var o=Object.keys(this.contractIndex[i].types).find(e=>this.contractIndex[i].types[e]===t.message);if(i&&o){let s=this.getContract(i).lookupType(o).decode(t.data);this.binds[i]&&this.binds[i][o]&&this.binds[i][o].forEach(e=>e.apply(this.contextApp,[s,n.socket])),"function"==typeof this[o]&&this[o].call(this,s,n.socket)}else console.error("Unknown contract or message type:",t.contract,t.message)}catch(e){console.error(e)}},pack(e,s,t){try{var i,n,o,a,r;return this.contracts[e]&&this.contractIndex[e]?(n=(i=this.contractIndex[e])?.types[s],a=(o=this.contracts[e]?.lookupType(s))&&t?o.encode(t).finish():null,(r=(this.contracts.ws?.lookupType("WsCall"))?.encode({contract:i?.index,message:n,data:a&&a instanceof Uint8Array?a:new Uint8Array}).finish())?new Uint8Array(r):null):(console.error(`Not found in contract list ${e}.`+s),null)}catch(e){console.error(e)}},send(e){this.socket&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):console.warn("WebSocket is not open. Unable to send message.")},LoginRequest(e){e=this.pack("auth","LoginRequest",e);this.send(e)},RegisterRequest(e){e=this.pack("auth","RegisterRequest",e);this.send(e)},AddTaskRequest(e){e=this.pack("task","AddTaskRequest",{item:e});this.send(e)},UpdateTaskRequest(e){e=this.pack("task","UpdateTaskRequest",{id:e._id||e.id,item:e});this.send(e)},DeleteTaskRequest(e){e=this.pack("task","DeleteTaskRequest",{id:e._id||e.id});this.send(e)},GetAllTaskRequest(){var e=this.pack("task","GetAllTaskRequest");this.send(e)}}};