import{ref,reactive,onMounted}from"vue";import protobuf from"protobufjs";function useCMMV(){let s=ref(null),d=ref(0),p=reactive({}),o=reactive({}),t=()=>{var e=window.location.href.replace("https","wss").replace("http","ws");s.value=new WebSocket(e),s.value.binaryType="arraybuffer",s.value.addEventListener("message",a),s.value.addEventListener("open",()=>{}),s.value.addEventListener("close",()=>{console.warn("WebSocket disconnected. Attempting to reconnect in 10 seconds..."),setTimeout(()=>{t()},1e4)}),s.value.addEventListener("error",e=>{console.error("WebSocket error:",e)})},e=e=>{try{for(var s in d.value=e.index,e.contracts){var t;e.contracts.hasOwnProperty(s)&&(t=protobuf.Root.fromJSON(e.contracts[s]),p[s]=t)}}catch(e){console.error("Error loading contracts:",e)}},r=e=>p[e],a=n=>{try{var e=n.data instanceof ArrayBuffer?new Uint8Array(n.data):n.data;let t=p.ws.lookupType("WsCall").decode(e),a=Object.keys(d.value).find(e=>d.value[e].index===t.contract);var i=Object.keys(d.value[a].types).find(e=>d.value[a].types[e]===t.message);if(a&&i){let s=r(a).lookupType(i).decode(t.data);o[a]&&o[a][i]&&o[a][i].forEach(e=>e.apply(null,[s,n.socket])),"function"==typeof this?.[i]&&this[i](s,n.socket)}else console.error("Unknown contract or message type:",t.contract,t.message)}catch(e){console.error(e)}};onMounted(()=>{e({index:{auth:{index:0,types:{User:0,LoginRequest:1,LoginResponse:2,RegisterRequest:3,RegisterResponse:4,AuthService:5}},task:{index:1,types:{Task:0,TaskList:1,AddTaskRequest:2,AddTaskResponse:3,UpdateTaskRequest:4,UpdateTaskResponse:5,DeleteTaskRequest:6,DeleteTaskResponse:7,GetAllTaskRequest:8,GetAllTaskResponse:9,TaskService:10}},ws:{index:2,types:{WsCall:0}},wserror:{index:3,types:{WsError:0}}},contracts:{auth:{options:{syntax:"proto3"},nested:{auth:{nested:{User:{fields:{username:{type:"string",id:1},password:{type:"string",id:2},googleId:{type:"string",id:3},groups:{type:"string",id:4}}},LoginRequest:{fields:{username:{type:"string",id:1},password:{type:"string",id:2}}},LoginResponse:{fields:{success:{type:"bool",id:1},token:{type:"string",id:2},message:{type:"string",id:3}}},RegisterRequest:{fields:{username:{type:"string",id:1},email:{type:"string",id:2},password:{type:"string",id:3}}},RegisterResponse:{fields:{success:{type:"bool",id:1},message:{type:"string",id:3}}},AuthService:{methods:{Login:{requestType:"LoginRequest",responseType:"LoginResponse"},Register:{requestType:"RegisterRequest",responseType:"RegisterResponse"}}}}}}},task:{options:{syntax:"proto3"},nested:{task:{nested:{Task:{fields:{label:{type:"string",id:1},checked:{type:"bool",id:2},removed:{type:"bool",id:3},createAt:{type:"string",id:4}}},TaskList:{fields:{items:{rule:"repeated",type:"Task",id:1}}},AddTaskRequest:{fields:{item:{type:"Task",id:1}}},AddTaskResponse:{fields:{id:{type:"string",id:1},item:{type:"Task",id:2}}},UpdateTaskRequest:{fields:{id:{type:"string",id:1},item:{type:"Task",id:2}}},UpdateTaskResponse:{fields:{id:{type:"string",id:1},item:{type:"Task",id:2}}},DeleteTaskRequest:{fields:{id:{type:"string",id:1}}},DeleteTaskResponse:{fields:{success:{type:"bool",id:1},affected:{type:"int32",id:2},id:{type:"string",id:3}}},GetAllTaskRequest:{fields:{}},GetAllTaskResponse:{fields:{items:{type:"TaskList",id:1}}},TaskService:{methods:{AddTask:{requestType:"AddTaskRequest",responseType:"AddTaskResponse"},UpdateTask:{requestType:"UpdateTaskRequest",responseType:"UpdateTaskResponse"},DeleteTask:{requestType:"DeleteTaskRequest",responseType:"DeleteTaskResponse"},GetAllTask:{requestType:"GetAllTaskRequest",responseType:"GetAllTaskResponse"}}}}}}},ws:{options:{syntax:"proto3"},nested:{ws:{nested:{WsCall:{fields:{contract:{type:"int32",id:1},message:{type:"int32",id:2},data:{type:"bytes",id:3}}}}}}},wserror:{options:{syntax:"proto3"},nested:{wserror:{nested:{WsError:{fields:{message:{type:"string",id:1},code:{type:"int32",id:2},context:{type:"string",id:3}}}}}}}}}),t()});return{socket:s,contractIndex:d,contracts:p,binds:o,connectWebSocket:t,addContracts:e,getContract:r,parseMessage:a,pack:(e,s,t)=>{try{var a,n,i,o,r;return p[e]&&d.value[e]?(n=(a=d.value[e])?.types[s],o=(i=p[e]?.lookupType(s))&&t?i.encode(t).finish():null,(r=(p.ws?.lookupType("WsCall"))?.encode({contract:a?.index,message:n,data:o&&o instanceof Uint8Array?o:new Uint8Array}).finish())?new Uint8Array(r):null):(console.error(`Not found in contract list ${e}.`+s),null)}catch(e){console.error(e)}},send:e=>{s.value&&s.value.readyState===WebSocket.OPEN?s.value.send(e):console.warn("WebSocket is not open. Unable to send message.")},LoginRequest(e){e=this.pack("auth","LoginRequest",e);this.send(e)},RegisterRequest(e){e=this.pack("auth","RegisterRequest",e);this.send(e)},AddTaskRequest(e){e=this.pack("task","AddTaskRequest",{item:e});this.send(e)},UpdateTaskRequest(e){e=this.pack("task","UpdateTaskRequest",{id:e._id||e.id,item:e});this.send(e)},DeleteTaskRequest(e){e=this.pack("task","DeleteTaskRequest",{id:e._id||e.id});this.send(e)},GetAllTaskRequest(){var e=this.pack("task","GetAllTaskRequest");this.send(e)}}}export{useCMMV};